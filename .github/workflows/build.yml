name: Build PCB (Atopile)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Atopile
        run: |
          python -m pip install --upgrade pip
          pip install atopile==0.12.4

      - name: Build Hardware Project
        working-directory: hardware
        run: |
          ato build --no-color

      - name: List build outputs (diagnostic)
        if: always()
        run: |
          echo "Workspace: $GITHUB_WORKSPACE"
          ls -la
          echo "-- hardware/build --"
          ls -la hardware/build || true
          echo "-- hardware/build/builds --"
          ls -la hardware/build/builds || true
          echo "-- hardware/build/builds/default --"
          ls -la hardware/build/builds/default || true
          echo "-- build/builds --"
          ls -la build/builds || true
          echo "-- build/builds/default --"
          ls -la build/builds/default || true
          echo "-- find candidate files --"
          find . -maxdepth 5 -type f \( -name "*.kicad_pcb" -o -name "default.bom.csv" -o -name "*.variables.md" -o -name "*.i2c_tree.md" \) -print || true

      - name: Fail if BOM empty
        shell: bash
        run: |
          set -euo pipefail
          # Search for a non-empty default.bom.csv under common output roots
          BOM=$(find hardware/build build -type f -name "default.bom.csv" -print 2>/dev/null | head -n 1 || true)
          if [ -z "${BOM:-}" ]; then
            echo "No default.bom.csv found under hardware/build or build" >&2
            echo "Tree preview:" >&2
            find hardware/build build -maxdepth 3 -type d -print 2>/dev/null || true
            exit 1
          fi
          if [ ! -s "$BOM" ]; then
            echo "BOM file exists but is empty: $BOM" >&2
            exit 1
          fi
          echo "Using BOM: $BOM"
          COUNT=$(grep -v '^#' "$BOM" | sed '/^$/d' | wc -l || true)
          if [ "$COUNT" -le 1 ]; then
            echo "BOM appears to have no component rows (lines: $COUNT)" >&2
            exit 1
          fi
          echo "BOM check passed with $COUNT lines"

      - name: Collect artifacts into dist
        shell: bash
        run: |
          set -euo pipefail
          rm -rf dist || true
          mkdir -p dist/builds/default
          ROOT=""
          if [ -d hardware/build/builds/default ]; then
            ROOT=hardware/build/builds/default
          fi
          if [ -z "$ROOT" ] && [ -d build/builds/default ]; then
            ROOT=build/builds/default
          fi
          if [ -z "$ROOT" ]; then
            echo "No default build output dirs found under hardware/build/builds or build/builds" >&2
            find hardware/build build -maxdepth 3 -type d -print 2>/dev/null || true
            exit 1
          fi
          echo "Using output root: $ROOT"
          cp -r "$ROOT"/* dist/builds/default/ 2>/dev/null || true
          echo "Collected files in dist/builds/default:" 
          ls -la dist/builds/default || true

      - name: Upload build artifacts (KiCad + reports)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pcb-build-artifacts
          path: |
            dist/builds/default
          if-no-files-found: error

      - name: Upload 3D / GLB (if present)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pcb-3d
          path: |
            dist/builds/default/*.pcba.glb
          if-no-files-found: ignore

      - name: Upload build logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pcb-build-logs
          path: |
            hardware/build/logs/**
          if-no-files-found: warn
