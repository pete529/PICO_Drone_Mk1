# Raspberry Pi Pico 2W Quadcopter Flight Controller PCB
# Comprehensive signal definition for complete quadcopter design.
# This will generate a proper netlist for KiCad implementation.

#pragma experiment("TRAITS")
#pragma experiment("BRIDGE_CONNECT")

# Component module imports
import ElectricPower
from "parts/Raspberry_Pi_Pico_2W/Raspberry_Pi_Pico_2W.ato" import Raspberry_Pi_Pico_2W
from "parts/TI_DRV8833/TI_DRV8833.ato" import TI_DRV8833
from "parts/GY-91/GY-91.ato" import GY_91_Module
from "parts/AmigoPro_PIM485/AmigoPro_PIM485.ato" import AmigoPro_PIM485
from "parts/Connector_2Pin_JST_PH/Connector_2Pin_JST_PH.ato" import Connector_2Pin_JST_PH
from "atopile/bosch-bmp280/bosch-bmp280.ato" import Bosch_BMP280
from "atopile/indicator-leds/indicator-leds.ato" import LEDIndicatorRed, LEDIndicatorGreen
from "atopile/buttons/buttons.ato" import HorizontalButton
from "parts/UBlox_NEO6M/UBlox_NEO6M.ato" import UBlox_NEO6M


module App:
    """Main quadcopter flight controller board"""
    
    # ===========================================
    # POWER DISTRIBUTION SIGNALS
    # ===========================================
    signal VBAT        # LiPo battery voltage (3.7V nominal)
    signal VSYS        # System voltage from Amigo Pro
    signal VCC_5V      # 5V rail from Amigo Pro (for motors)
    signal VCC_3V3     # 3.3V rail from Pico (for logic/sensors)
    signal GND         # Ground reference
    
    # ===========================================
    # SIGNAL CONNECTIONS (NETLIST)
    # ===========================================
    # ===========================================
    # COMPONENT INSTANTIATIONS (initial)
    # ===========================================
    pico = new Raspberry_Pi_Pico_2W    # Raspberry Pi Pico 2W module (pickable)
    drv_left = new TI_DRV8833          # Left side DRV8833 (pickable)
    drv_right = new TI_DRV8833         # Right side DRV8833 (pickable)
    imu = new GY_91_Module             # GY-91 module (pickable)
    baro = new Bosch_BMP280            # BMP280 barometer/temperature sensor (official package)
    power = new AmigoPro_PIM485        # LiPo Amigo Pro power module (pickable)
    power_3v3 = new ElectricPower      # Typed 3.3V rail for library packages
    led_red_ind = new LEDIndicatorRed  # Red status LED (GPIO controlled)
    led_green_ind = new LEDIndicatorGreen  # Green status LED (power indicator)
    gps = new UBlox_NEO6M   # GPS module (UART0)
    btn = new HorizontalButton         # Power button (momentary)
    motor_l1_conn = new Connector_2Pin_JST_PH  # Motor Left 1 connector (pickable)
    motor_l2_conn = new Connector_2Pin_JST_PH  # Motor Left 2 connector (pickable)
    motor_r1_conn = new Connector_2Pin_JST_PH  # Motor Right 1 connector (pickable)
    motor_r2_conn = new Connector_2Pin_JST_PH  # Motor Right 2 connector (pickable)
    # Passive components
    # Green LED uses official package with internal resistor; no extra resistor needed
    # Note: External pull-up resistor removed; we'll rely on Pico's internal pull-up or firmware configuration.

    # I2C bus (connect devices directly to Pico I2C)
    pico.SDA ~ imu.SDA
    pico.SCL ~ imu.SCL
    pico.SDA ~ baro.i2c.sda.line
    pico.SCL ~ baro.i2c.scl.line
    # Create typed 3v3 rail and wire to nets
    power_3v3.vcc ~ VCC_3V3
    power_3v3.gnd ~ GND
    # Provide power rails (core and IO can both be 3v3 on this board)
    power_3v3 ~ baro.power_core
    power_3v3 ~ baro.power_io
    
    # Motor driver control signals (direct to Pico GPIOs)
    pico.GP8 ~ drv_left.AIN1
    pico.GP9 ~ drv_left.AIN2
    pico.GP2 ~ drv_left.BIN1
    pico.GP3 ~ drv_left.BIN2
    pico.GP4 ~ drv_right.AIN1
    pico.GP5 ~ drv_right.AIN2
    pico.GP6 ~ drv_right.BIN1
    pico.GP7 ~ drv_right.BIN2
    # Enable/SLEEP pins
    pico.GP15 ~ drv_left.SLEEP
    pico.GP17 ~ drv_right.SLEEP
    
    # LED circuits: Red (GPIO controlled) and Green (power indicator always on)
    # Red LED: bridge between GPIO and ground via the indicator LED module
    pico.GP14 ~> led_red_ind ~> power_3v3.lv

    # Green LED: direct ElectricPower connection using official package
    power_3v3 ~ led_green_ind.power
    
    # Button: connect GPIO to button and logic ground via official button package
    # External pull-up omitted; configure internal pull-up in firmware
    pico.GP13 ~> btn ~> power_3v3.lv
    
    # IMU interrupt
    pico.GP16 ~ imu.INT

    # GPS UART0 and power
    pico.GP0 ~ gps.RX
    pico.GP1 ~ gps.TX
    gps.VCC ~ VCC_3V3
    gps.GND ~ GND

    # Motor driver outputs direct to motor connectors
    drv_left.AOUT1 ~ motor_l1_conn.1
    drv_left.AOUT2 ~ motor_l1_conn.2
    drv_left.BOUT1 ~ motor_l2_conn.1
    drv_left.BOUT2 ~ motor_l2_conn.2
    drv_right.AOUT1 ~ motor_r1_conn.1
    drv_right.AOUT2 ~ motor_r1_conn.2
    drv_right.BOUT1 ~ motor_r2_conn.1
    drv_right.BOUT2 ~ motor_r2_conn.2

    # I2C and interrupts connected above

    # Power rails
    power.VBAT_OUT ~ VSYS
    pico.VSYS ~ VSYS
    power.V5 ~ VCC_5V
    drv_left.VM ~ VCC_5V
    drv_right.VM ~ VCC_5V
    pico.V3V3 ~ VCC_3V3
    imu.VCC ~ VCC_3V3

    # Grounds
    power.GND ~ GND
    pico.GND ~ GND
    drv_left.GND ~ GND
    drv_right.GND ~ GND
    imu.GND ~ GND
